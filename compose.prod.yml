version: "3"

services:
    next-app:
        container_name: next-app
        build:
            context: ./next
            dockerfile: prod.Dockerfile
            args:
                - NEXT_PUBLIC_SYSTEM_NAME=${NEXT_PUBLIC_SYSTEM_NAME}
                - NEXT_PUBLIC_SYSTEM_NAME_SHORT=${NEXT_PUBLIC_SYSTEM_NAME_SHORT}
                - NEXT_PUBLIC_SYSTEM_MANAGE_ITEM=${NEXT_PUBLIC_SYSTEM_MANAGE_ITEM}
                - NEXT_PUBLIC_SYSTEM_HOST=${NEXT_PUBLIC_SYSTEM_HOST}
                - NEXT_PUBLIC_SYSTEM_DESCRIPTION=${NEXT_PUBLIC_SYSTEM_DESCRIPTION}
                - NEXT_PUBLIC_MAX_HISTORY_COUNT=${NEXT_PUBLIC_MAX_HISTORY_COUNT}
                - MYSQL_HOST=${MYSQL_HOST}
                - MYSQL_PORT=${MYSQL_PORT}
                - MYSQL_DATABASE=${MYSQL_DATABASE}
                - MYSQL_USER=${MYSQL_USER}
                - MYSQL_PASSWORD=${MYSQL_PASSWORD}
                - MYSQL_DATABASE_URL=${MYSQL_DATABASE_URL}
        restart: always
        ports:
            - 3000:3000
        networks:
            - my_network
        depends_on:
            - db

    db:
        image: mysql:latest
        container_name: mysql
        restart: always
        ports:
            - 3306:3306
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        volumes:
            - ./mysql/conf.d:/etc/mysql/conf.d
            - ./mysql/init.d:/docker-entrypoint-initdb.d
        networks:
            - my_network

    # Add more containers below (nginx, postgres, etc.)

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
    my_network:
        external: true
